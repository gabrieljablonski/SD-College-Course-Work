// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spidHandler.proto

package protoBuffers

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("spidHandler.proto", fileDescriptor_97215654e7c7179a) }

var fileDescriptor_97215654e7c7179a = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x4f, 0xc2, 0x30,
	0x18, 0xc6, 0x3d, 0x79, 0x28, 0xa0, 0x52, 0xc3, 0x85, 0x68, 0x44, 0xfe, 0xea, 0x85, 0x83, 0x7e,
	0x02, 0x94, 0x04, 0x4d, 0xb8, 0x88, 0x21, 0x26, 0x26, 0x26, 0x4e, 0xf6, 0x0e, 0x1b, 0x71, 0x9d,
	0xeb, 0xf0, 0x9b, 0x7b, 0x37, 0xdd, 0xd6, 0xae, 0x74, 0x6d, 0xc7, 0x89, 0xa4, 0xcf, 0xaf, 0xbf,
	0x27, 0x0d, 0xef, 0x5e, 0xd4, 0x64, 0x11, 0xf1, 0x1f, 0xbc, 0xd0, 0xdf, 0x40, 0x3c, 0x8e, 0x62,
	0x9a, 0x50, 0x5c, 0x4f, 0x7f, 0xee, 0xb6, 0x41, 0x00, 0x31, 0x6b, 0xb7, 0x38, 0x30, 0x85, 0x80,
	0x84, 0x24, 0x21, 0x34, 0x64, 0x19, 0xd4, 0x6e, 0x6d, 0x19, 0xc4, 0xa5, 0xe3, 0x9b, 0xbf, 0x06,
	0xaa, 0x3d, 0x17, 0x46, 0x3c, 0x47, 0xb5, 0x19, 0x24, 0xfc, 0xe4, 0x31, 0x0c, 0x28, 0x3e, 0x1b,
	0xab, 0xee, 0x71, 0x1e, 0x2d, 0xe0, 0x67, 0x0b, 0x2c, 0x69, 0x9f, 0x5b, 0x52, 0x16, 0xd1, 0x90,
	0x41, 0xf7, 0x00, 0xbf, 0xa0, 0xfa, 0x02, 0xd6, 0x84, 0x25, 0x10, 0xf3, 0x04, 0x5f, 0xee, 0x5e,
	0x50, 0x33, 0xe1, 0xec, 0xba, 0x10, 0x29, 0x7e, 0x42, 0x68, 0x19, 0xf9, 0x5e, 0x02, 0xa9, 0xf6,
	0x62, 0xf7, 0x4e, 0x91, 0x08, 0x69, 0xc7, 0x0e, 0xa8, 0xca, 0x29, 0x6c, 0xc0, 0xac, 0x2c, 0x12,
	0x8b, 0x52, 0x05, 0xa4, 0xf2, 0x15, 0x35, 0x26, 0xbe, 0xbf, 0x80, 0x6f, 0x9a, 0x5b, 0xb5, 0xc7,
	0xed, 0x84, 0x42, 0xdc, 0x73, 0x32, 0xd2, 0xbd, 0x42, 0x27, 0xd9, 0x33, 0x14, 0xfd, 0xc0, 0xf4,
	0xcc, 0x72, 0xc3, 0xb0, 0x0a, 0x53, 0x4b, 0xf8, 0xf9, 0xaf, 0xa3, 0x44, 0xcf, 0x2d, 0x25, 0x65,
	0x4c, 0x96, 0x64, 0x23, 0xb7, 0x64, 0x10, 0x5b, 0x46, 0x8e, 0x47, 0xf6, 0x91, 0xcb, 0x52, 0xd3,
	0xc8, 0xf1, 0xc4, 0x36, 0x72, 0xaa, 0xb3, 0xeb, 0x42, 0xca, 0x23, 0x97, 0x6a, 0x8d, 0x23, 0xa7,
	0x4a, 0x3b, 0x76, 0xa0, 0x3c, 0x72, 0x26, 0x65, 0x91, 0x38, 0x47, 0x4e, 0x53, 0x12, 0x84, 0x73,
	0x7c, 0xc2, 0x18, 0x5d, 0x11, 0x8f, 0x7f, 0xec, 0x78, 0xa4, 0xbf, 0x50, 0x27, 0x44, 0xc5, 0x55,
	0x35, 0x28, 0xab, 0x36, 0xe8, 0x34, 0xcf, 0xa7, 0x44, 0xe9, 0x32, 0x2b, 0x54, 0x44, 0x94, 0x5d,
	0xef, 0x41, 0xca, 0xb6, 0x77, 0x74, 0x9c, 0x03, 0x72, 0x39, 0xf5, 0x8d, 0xf7, 0x45, 0x2c, 0x5a,
	0x06, 0x15, 0x94, 0x6c, 0x08, 0x50, 0x33, 0x0f, 0xe7, 0x74, 0xf5, 0x75, 0xff, 0xe9, 0x85, 0x6b,
	0xc0, 0x43, 0xe3, 0xed, 0x02, 0x10, 0x2d, 0xa3, 0x4a, 0xce, 0xb8, 0x15, 0xd2, 0x3f, 0xde, 0xb6,
	0x15, 0xd4, 0xff, 0xbe, 0xe7, 0x64, 0x6c, 0x5b, 0x21, 0xd5, 0x3b, 0xb6, 0x82, 0xda, 0x30, 0xac,
	0xc2, 0x6c, 0x5b, 0xc1, 0x54, 0xa2, 0xe7, 0x7b, 0x6c, 0x05, 0xad, 0xe4, 0x0d, 0x1d, 0xcd, 0x20,
	0x29, 0x16, 0x06, 0xc3, 0xbd, 0xd2, 0xa7, 0xaf, 0xa4, 0xa2, 0xa0, 0xef, 0x86, 0x84, 0xfe, 0xe3,
	0x30, 0xc5, 0x6e, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x24, 0xad, 0x54, 0x53, 0x4f, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpidHandlerClient is the client API for SpidHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpidHandlerClient interface {
	GetSpidInfo(ctx context.Context, in *GetSpidRequest, opts ...grpc.CallOption) (*GetSpidResponse, error)
	RegisterSpid(ctx context.Context, in *RegisterSpidRequest, opts ...grpc.CallOption) (*RegisterSpidResponse, error)
	UpdateSpid(ctx context.Context, in *UpdateSpidRequest, opts ...grpc.CallOption) (*UpdateSpidResponse, error)
	DeleteSpid(ctx context.Context, in *DeleteSpidRequest, opts ...grpc.CallOption) (*DeleteSpidResponse, error)
	AddRemoteSpid(ctx context.Context, in *AddRemoteSpidRequest, opts ...grpc.CallOption) (*AddRemoteSpidResponse, error)
	UpdateRemoteSpid(ctx context.Context, in *UpdateRemoteSpidRequest, opts ...grpc.CallOption) (*UpdateRemoteSpidResponse, error)
	RemoveRemoteSpid(ctx context.Context, in *RemoveRemoteSpidRequest, opts ...grpc.CallOption) (*RemoveRemoteSpidResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	RequestAssociation(ctx context.Context, in *RequestAssociationRequest, opts ...grpc.CallOption) (*RequestAssociationResponse, error)
	RequestDissociation(ctx context.Context, in *RequestDissociationRequest, opts ...grpc.CallOption) (*RequestDissociationResponse, error)
	RequestSpidInfo(ctx context.Context, in *RequestSpidInfoRequest, opts ...grpc.CallOption) (*RequestSpidInfoResponse, error)
	RequestLockChange(ctx context.Context, in *RequestLockChangeRequest, opts ...grpc.CallOption) (*RequestLockChangeResponse, error)
	AddRemoteUser(ctx context.Context, in *AddRemoteUserRequest, opts ...grpc.CallOption) (*AddRemoteUserResponse, error)
	UpdateRemoteUser(ctx context.Context, in *UpdateRemoteUserRequest, opts ...grpc.CallOption) (*UpdateRemoteUserResponse, error)
	RemoveRemoteUser(ctx context.Context, in *RemoveRemoteUserRequest, opts ...grpc.CallOption) (*RemoveRemoteUserResponse, error)
	GetRemoteSpids(ctx context.Context, in *GetRemoteSpidsRequest, opts ...grpc.CallOption) (*GetRemoteSpidsResponse, error)
}

type spidHandlerClient struct {
	cc *grpc.ClientConn
}

func NewSpidHandlerClient(cc *grpc.ClientConn) SpidHandlerClient {
	return &spidHandlerClient{cc}
}

func (c *spidHandlerClient) GetSpidInfo(ctx context.Context, in *GetSpidRequest, opts ...grpc.CallOption) (*GetSpidResponse, error) {
	out := new(GetSpidResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/GetSpidInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RegisterSpid(ctx context.Context, in *RegisterSpidRequest, opts ...grpc.CallOption) (*RegisterSpidResponse, error) {
	out := new(RegisterSpidResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RegisterSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) UpdateSpid(ctx context.Context, in *UpdateSpidRequest, opts ...grpc.CallOption) (*UpdateSpidResponse, error) {
	out := new(UpdateSpidResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/UpdateSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) DeleteSpid(ctx context.Context, in *DeleteSpidRequest, opts ...grpc.CallOption) (*DeleteSpidResponse, error) {
	out := new(DeleteSpidResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/DeleteSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) AddRemoteSpid(ctx context.Context, in *AddRemoteSpidRequest, opts ...grpc.CallOption) (*AddRemoteSpidResponse, error) {
	out := new(AddRemoteSpidResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/AddRemoteSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) UpdateRemoteSpid(ctx context.Context, in *UpdateRemoteSpidRequest, opts ...grpc.CallOption) (*UpdateRemoteSpidResponse, error) {
	out := new(UpdateRemoteSpidResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/UpdateRemoteSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RemoveRemoteSpid(ctx context.Context, in *RemoveRemoteSpidRequest, opts ...grpc.CallOption) (*RemoveRemoteSpidResponse, error) {
	out := new(RemoveRemoteSpidResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RemoveRemoteSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) GetUserInfo(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RequestAssociation(ctx context.Context, in *RequestAssociationRequest, opts ...grpc.CallOption) (*RequestAssociationResponse, error) {
	out := new(RequestAssociationResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RequestAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RequestDissociation(ctx context.Context, in *RequestDissociationRequest, opts ...grpc.CallOption) (*RequestDissociationResponse, error) {
	out := new(RequestDissociationResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RequestDissociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RequestSpidInfo(ctx context.Context, in *RequestSpidInfoRequest, opts ...grpc.CallOption) (*RequestSpidInfoResponse, error) {
	out := new(RequestSpidInfoResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RequestSpidInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RequestLockChange(ctx context.Context, in *RequestLockChangeRequest, opts ...grpc.CallOption) (*RequestLockChangeResponse, error) {
	out := new(RequestLockChangeResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RequestLockChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) AddRemoteUser(ctx context.Context, in *AddRemoteUserRequest, opts ...grpc.CallOption) (*AddRemoteUserResponse, error) {
	out := new(AddRemoteUserResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/AddRemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) UpdateRemoteUser(ctx context.Context, in *UpdateRemoteUserRequest, opts ...grpc.CallOption) (*UpdateRemoteUserResponse, error) {
	out := new(UpdateRemoteUserResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/UpdateRemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RemoveRemoteUser(ctx context.Context, in *RemoveRemoteUserRequest, opts ...grpc.CallOption) (*RemoveRemoteUserResponse, error) {
	out := new(RemoveRemoteUserResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/RemoveRemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) GetRemoteSpids(ctx context.Context, in *GetRemoteSpidsRequest, opts ...grpc.CallOption) (*GetRemoteSpidsResponse, error) {
	out := new(GetRemoteSpidsResponse)
	err := c.cc.Invoke(ctx, "/protoBuffers.SpidHandler/GetRemoteSpids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpidHandlerServer is the server API for SpidHandler service.
type SpidHandlerServer interface {
	GetSpidInfo(context.Context, *GetSpidRequest) (*GetSpidResponse, error)
	RegisterSpid(context.Context, *RegisterSpidRequest) (*RegisterSpidResponse, error)
	UpdateSpid(context.Context, *UpdateSpidRequest) (*UpdateSpidResponse, error)
	DeleteSpid(context.Context, *DeleteSpidRequest) (*DeleteSpidResponse, error)
	AddRemoteSpid(context.Context, *AddRemoteSpidRequest) (*AddRemoteSpidResponse, error)
	UpdateRemoteSpid(context.Context, *UpdateRemoteSpidRequest) (*UpdateRemoteSpidResponse, error)
	RemoveRemoteSpid(context.Context, *RemoveRemoteSpidRequest) (*RemoveRemoteSpidResponse, error)
	GetUserInfo(context.Context, *GetUserRequest) (*GetUserResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	RequestAssociation(context.Context, *RequestAssociationRequest) (*RequestAssociationResponse, error)
	RequestDissociation(context.Context, *RequestDissociationRequest) (*RequestDissociationResponse, error)
	RequestSpidInfo(context.Context, *RequestSpidInfoRequest) (*RequestSpidInfoResponse, error)
	RequestLockChange(context.Context, *RequestLockChangeRequest) (*RequestLockChangeResponse, error)
	AddRemoteUser(context.Context, *AddRemoteUserRequest) (*AddRemoteUserResponse, error)
	UpdateRemoteUser(context.Context, *UpdateRemoteUserRequest) (*UpdateRemoteUserResponse, error)
	RemoveRemoteUser(context.Context, *RemoveRemoteUserRequest) (*RemoveRemoteUserResponse, error)
	GetRemoteSpids(context.Context, *GetRemoteSpidsRequest) (*GetRemoteSpidsResponse, error)
}

// UnimplementedSpidHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedSpidHandlerServer struct {
}

func (*UnimplementedSpidHandlerServer) GetSpidInfo(ctx context.Context, req *GetSpidRequest) (*GetSpidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpidInfo not implemented")
}
func (*UnimplementedSpidHandlerServer) RegisterSpid(ctx context.Context, req *RegisterSpidRequest) (*RegisterSpidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSpid not implemented")
}
func (*UnimplementedSpidHandlerServer) UpdateSpid(ctx context.Context, req *UpdateSpidRequest) (*UpdateSpidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpid not implemented")
}
func (*UnimplementedSpidHandlerServer) DeleteSpid(ctx context.Context, req *DeleteSpidRequest) (*DeleteSpidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpid not implemented")
}
func (*UnimplementedSpidHandlerServer) AddRemoteSpid(ctx context.Context, req *AddRemoteSpidRequest) (*AddRemoteSpidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteSpid not implemented")
}
func (*UnimplementedSpidHandlerServer) UpdateRemoteSpid(ctx context.Context, req *UpdateRemoteSpidRequest) (*UpdateRemoteSpidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemoteSpid not implemented")
}
func (*UnimplementedSpidHandlerServer) RemoveRemoteSpid(ctx context.Context, req *RemoveRemoteSpidRequest) (*RemoveRemoteSpidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRemoteSpid not implemented")
}
func (*UnimplementedSpidHandlerServer) GetUserInfo(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedSpidHandlerServer) RegisterUser(ctx context.Context, req *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedSpidHandlerServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedSpidHandlerServer) DeleteUser(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedSpidHandlerServer) RequestAssociation(ctx context.Context, req *RequestAssociationRequest) (*RequestAssociationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAssociation not implemented")
}
func (*UnimplementedSpidHandlerServer) RequestDissociation(ctx context.Context, req *RequestDissociationRequest) (*RequestDissociationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDissociation not implemented")
}
func (*UnimplementedSpidHandlerServer) RequestSpidInfo(ctx context.Context, req *RequestSpidInfoRequest) (*RequestSpidInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSpidInfo not implemented")
}
func (*UnimplementedSpidHandlerServer) RequestLockChange(ctx context.Context, req *RequestLockChangeRequest) (*RequestLockChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLockChange not implemented")
}
func (*UnimplementedSpidHandlerServer) AddRemoteUser(ctx context.Context, req *AddRemoteUserRequest) (*AddRemoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteUser not implemented")
}
func (*UnimplementedSpidHandlerServer) UpdateRemoteUser(ctx context.Context, req *UpdateRemoteUserRequest) (*UpdateRemoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemoteUser not implemented")
}
func (*UnimplementedSpidHandlerServer) RemoveRemoteUser(ctx context.Context, req *RemoveRemoteUserRequest) (*RemoveRemoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRemoteUser not implemented")
}
func (*UnimplementedSpidHandlerServer) GetRemoteSpids(ctx context.Context, req *GetRemoteSpidsRequest) (*GetRemoteSpidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteSpids not implemented")
}

func RegisterSpidHandlerServer(s *grpc.Server, srv SpidHandlerServer) {
	s.RegisterService(&_SpidHandler_serviceDesc, srv)
}

func _SpidHandler_GetSpidInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).GetSpidInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/GetSpidInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).GetSpidInfo(ctx, req.(*GetSpidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RegisterSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSpidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RegisterSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RegisterSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RegisterSpid(ctx, req.(*RegisterSpidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_UpdateSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).UpdateSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/UpdateSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).UpdateSpid(ctx, req.(*UpdateSpidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_DeleteSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).DeleteSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/DeleteSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).DeleteSpid(ctx, req.(*DeleteSpidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_AddRemoteSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteSpidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).AddRemoteSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/AddRemoteSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).AddRemoteSpid(ctx, req.(*AddRemoteSpidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_UpdateRemoteSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemoteSpidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).UpdateRemoteSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/UpdateRemoteSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).UpdateRemoteSpid(ctx, req.(*UpdateRemoteSpidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RemoveRemoteSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRemoteSpidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RemoveRemoteSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RemoveRemoteSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RemoveRemoteSpid(ctx, req.(*RemoveRemoteSpidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).GetUserInfo(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RequestAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RequestAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RequestAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RequestAssociation(ctx, req.(*RequestAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RequestDissociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDissociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RequestDissociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RequestDissociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RequestDissociation(ctx, req.(*RequestDissociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RequestSpidInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpidInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RequestSpidInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RequestSpidInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RequestSpidInfo(ctx, req.(*RequestSpidInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RequestLockChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLockChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RequestLockChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RequestLockChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RequestLockChange(ctx, req.(*RequestLockChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_AddRemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).AddRemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/AddRemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).AddRemoteUser(ctx, req.(*AddRemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_UpdateRemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).UpdateRemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/UpdateRemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).UpdateRemoteUser(ctx, req.(*UpdateRemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RemoveRemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RemoveRemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/RemoveRemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RemoveRemoteUser(ctx, req.(*RemoveRemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_GetRemoteSpids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteSpidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).GetRemoteSpids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuffers.SpidHandler/GetRemoteSpids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).GetRemoteSpids(ctx, req.(*GetRemoteSpidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpidHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBuffers.SpidHandler",
	HandlerType: (*SpidHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpidInfo",
			Handler:    _SpidHandler_GetSpidInfo_Handler,
		},
		{
			MethodName: "RegisterSpid",
			Handler:    _SpidHandler_RegisterSpid_Handler,
		},
		{
			MethodName: "UpdateSpid",
			Handler:    _SpidHandler_UpdateSpid_Handler,
		},
		{
			MethodName: "DeleteSpid",
			Handler:    _SpidHandler_DeleteSpid_Handler,
		},
		{
			MethodName: "AddRemoteSpid",
			Handler:    _SpidHandler_AddRemoteSpid_Handler,
		},
		{
			MethodName: "UpdateRemoteSpid",
			Handler:    _SpidHandler_UpdateRemoteSpid_Handler,
		},
		{
			MethodName: "RemoveRemoteSpid",
			Handler:    _SpidHandler_RemoveRemoteSpid_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _SpidHandler_GetUserInfo_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _SpidHandler_RegisterUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SpidHandler_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _SpidHandler_DeleteUser_Handler,
		},
		{
			MethodName: "RequestAssociation",
			Handler:    _SpidHandler_RequestAssociation_Handler,
		},
		{
			MethodName: "RequestDissociation",
			Handler:    _SpidHandler_RequestDissociation_Handler,
		},
		{
			MethodName: "RequestSpidInfo",
			Handler:    _SpidHandler_RequestSpidInfo_Handler,
		},
		{
			MethodName: "RequestLockChange",
			Handler:    _SpidHandler_RequestLockChange_Handler,
		},
		{
			MethodName: "AddRemoteUser",
			Handler:    _SpidHandler_AddRemoteUser_Handler,
		},
		{
			MethodName: "UpdateRemoteUser",
			Handler:    _SpidHandler_UpdateRemoteUser_Handler,
		},
		{
			MethodName: "RemoveRemoteUser",
			Handler:    _SpidHandler_RemoveRemoteUser_Handler,
		},
		{
			MethodName: "GetRemoteSpids",
			Handler:    _SpidHandler_GetRemoteSpids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spidHandler.proto",
}
