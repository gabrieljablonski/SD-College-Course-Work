// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spidHandler.proto

package spidPB

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97215654e7c7179a, []int{0}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClientRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type ServerResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Ok                   bool     `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
	Body                 string   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerResponse) Reset()         { *m = ServerResponse{} }
func (m *ServerResponse) String() string { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()    {}
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97215654e7c7179a, []int{1}
}

func (m *ServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerResponse.Unmarshal(m, b)
}
func (m *ServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerResponse.Marshal(b, m, deterministic)
}
func (m *ServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerResponse.Merge(m, src)
}
func (m *ServerResponse) XXX_Size() int {
	return xxx_messageInfo_ServerResponse.Size(m)
}
func (m *ServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerResponse proto.InternalMessageInfo

func (m *ServerResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServerResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServerResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ServerResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type GlobalPosition struct {
	Latitude             float64  `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalPosition) Reset()         { *m = GlobalPosition{} }
func (m *GlobalPosition) String() string { return proto.CompactTextString(m) }
func (*GlobalPosition) ProtoMessage()    {}
func (*GlobalPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_97215654e7c7179a, []int{2}
}

func (m *GlobalPosition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalPosition.Unmarshal(m, b)
}
func (m *GlobalPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalPosition.Marshal(b, m, deterministic)
}
func (m *GlobalPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalPosition.Merge(m, src)
}
func (m *GlobalPosition) XXX_Size() int {
	return xxx_messageInfo_GlobalPosition.Size(m)
}
func (m *GlobalPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalPosition.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalPosition proto.InternalMessageInfo

func (m *GlobalPosition) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GlobalPosition) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type LockInfo struct {
	Override             bool     `protobuf:"varint,1,opt,name=override,proto3" json:"override,omitempty"`
	Pending              bool     `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	State                string   `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockInfo) Reset()         { *m = LockInfo{} }
func (m *LockInfo) String() string { return proto.CompactTextString(m) }
func (*LockInfo) ProtoMessage()    {}
func (*LockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_97215654e7c7179a, []int{3}
}

func (m *LockInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockInfo.Unmarshal(m, b)
}
func (m *LockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockInfo.Marshal(b, m, deterministic)
}
func (m *LockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockInfo.Merge(m, src)
}
func (m *LockInfo) XXX_Size() int {
	return xxx_messageInfo_LockInfo.Size(m)
}
func (m *LockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LockInfo proto.InternalMessageInfo

func (m *LockInfo) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

func (m *LockInfo) GetPending() bool {
	if m != nil {
		return m.Pending
	}
	return false
}

func (m *LockInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Spid struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BatteryLevel         uint32          `protobuf:"varint,2,opt,name=batteryLevel,proto3" json:"batteryLevel,omitempty"`
	LockInfo             *LockInfo       `protobuf:"bytes,3,opt,name=lockInfo,proto3" json:"lockInfo,omitempty"`
	Location             *GlobalPosition `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	LastUpdated          string          `protobuf:"bytes,5,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	CurrentUserID        string          `protobuf:"bytes,6,opt,name=currentUserID,proto3" json:"currentUserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Spid) Reset()         { *m = Spid{} }
func (m *Spid) String() string { return proto.CompactTextString(m) }
func (*Spid) ProtoMessage()    {}
func (*Spid) Descriptor() ([]byte, []int) {
	return fileDescriptor_97215654e7c7179a, []int{4}
}

func (m *Spid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spid.Unmarshal(m, b)
}
func (m *Spid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spid.Marshal(b, m, deterministic)
}
func (m *Spid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spid.Merge(m, src)
}
func (m *Spid) XXX_Size() int {
	return xxx_messageInfo_Spid.Size(m)
}
func (m *Spid) XXX_DiscardUnknown() {
	xxx_messageInfo_Spid.DiscardUnknown(m)
}

var xxx_messageInfo_Spid proto.InternalMessageInfo

func (m *Spid) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Spid) GetBatteryLevel() uint32 {
	if m != nil {
		return m.BatteryLevel
	}
	return 0
}

func (m *Spid) GetLockInfo() *LockInfo {
	if m != nil {
		return m.LockInfo
	}
	return nil
}

func (m *Spid) GetLocation() *GlobalPosition {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Spid) GetLastUpdated() string {
	if m != nil {
		return m.LastUpdated
	}
	return ""
}

func (m *Spid) GetCurrentUserID() string {
	if m != nil {
		return m.CurrentUserID
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientRequest)(nil), "ClientRequest")
	proto.RegisterType((*ServerResponse)(nil), "ServerResponse")
	proto.RegisterType((*GlobalPosition)(nil), "GlobalPosition")
	proto.RegisterType((*LockInfo)(nil), "LockInfo")
	proto.RegisterType((*Spid)(nil), "Spid")
}

func init() { proto.RegisterFile("spidHandler.proto", fileDescriptor_97215654e7c7179a) }

var fileDescriptor_97215654e7c7179a = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x51, 0x6b, 0x14, 0x31,
	0x10, 0xc7, 0xdd, 0xf5, 0x5a, 0xf7, 0x66, 0x7b, 0x5b, 0x1a, 0x7c, 0x58, 0x8a, 0x0f, 0x65, 0x51,
	0x10, 0x84, 0x55, 0x4f, 0xd0, 0x77, 0x2d, 0x9c, 0x95, 0x7b, 0x90, 0x1c, 0x15, 0x5f, 0xb3, 0xcd,
	0x78, 0x84, 0x0b, 0xc9, 0x9a, 0xcc, 0x1d, 0xdc, 0xf7, 0xf0, 0xb3, 0xf9, 0x79, 0x64, 0x93, 0xbb,
	0x6d, 0x17, 0x1f, 0xba, 0x6f, 0x99, 0xff, 0xcc, 0xfc, 0x32, 0xf9, 0x33, 0x81, 0x0b, 0xdf, 0x2a,
	0xf9, 0x55, 0x18, 0xa9, 0xd1, 0xd5, 0xad, 0xb3, 0x64, 0xab, 0x05, 0xcc, 0xbe, 0x68, 0x85, 0x86,
	0x38, 0xfe, 0xde, 0xa2, 0x27, 0x56, 0x40, 0xaa, 0x64, 0x99, 0x5c, 0x25, 0xaf, 0xa7, 0x3c, 0x55,
	0x92, 0x31, 0x98, 0xd0, 0xbe, 0xc5, 0x32, 0x0d, 0x4a, 0x38, 0x77, 0x5a, 0x63, 0xe5, 0xbe, 0x7c,
	0x1a, 0xb5, 0xee, 0x5c, 0xfd, 0x84, 0x62, 0x85, 0x6e, 0x87, 0x8e, 0xa3, 0x6f, 0xad, 0xf1, 0x38,
	0x8a, 0x54, 0x40, 0x6a, 0x37, 0x81, 0x93, 0xf1, 0xd4, 0x6e, 0x7a, 0xf2, 0xe4, 0x01, 0xf9, 0x1b,
	0x14, 0x0b, 0x6d, 0x1b, 0xa1, 0xbf, 0x5b, 0xaf, 0x48, 0x59, 0xc3, 0x2e, 0x21, 0xd3, 0x82, 0x14,
	0x6d, 0x25, 0x06, 0x7e, 0xc2, 0xfb, 0x98, 0xbd, 0x80, 0xa9, 0xb6, 0x66, 0x1d, 0x93, 0x69, 0x48,
	0xde, 0x0b, 0xd5, 0x0f, 0xc8, 0x96, 0xf6, 0x6e, 0x73, 0x63, 0x7e, 0xd9, 0x8e, 0x62, 0x77, 0xe8,
	0x9c, 0x3a, 0x50, 0x32, 0xde, 0xc7, 0xac, 0x84, 0x67, 0x2d, 0x1a, 0xa9, 0xcc, 0x3a, 0x30, 0x32,
	0x7e, 0x0c, 0xd9, 0x73, 0x38, 0xf1, 0x24, 0x08, 0x0f, 0x8f, 0x8f, 0x41, 0xf5, 0x37, 0x81, 0xc9,
	0xaa, 0x55, 0xf2, 0xbf, 0x47, 0x57, 0x70, 0xd6, 0x08, 0x22, 0x74, 0xfb, 0x25, 0xee, 0x50, 0x07,
	0xda, 0x8c, 0x0f, 0x34, 0xf6, 0x0a, 0x32, 0x7d, 0x18, 0x2a, 0x50, 0xf3, 0xf9, 0xb4, 0x3e, 0x4e,
	0xc9, 0xfb, 0x14, 0x7b, 0x13, 0xca, 0x44, 0xe7, 0x40, 0xf0, 0x27, 0x9f, 0x9f, 0xd7, 0x43, 0x63,
	0x78, 0x5f, 0xc0, 0xae, 0x20, 0xd7, 0xc2, 0xd3, 0x6d, 0x2b, 0x05, 0xa1, 0x2c, 0x4f, 0xc2, 0x40,
	0x0f, 0x25, 0xf6, 0x12, 0x66, 0x77, 0x5b, 0xe7, 0xd0, 0xd0, 0xad, 0x47, 0x77, 0x73, 0x5d, 0x9e,
	0x86, 0x9a, 0xa1, 0x38, 0xff, 0x93, 0x42, 0xbe, 0xba, 0xdf, 0x1a, 0xf6, 0x0e, 0xf2, 0x05, 0x52,
	0xa7, 0x84, 0x99, 0x8a, 0x7a, 0xb0, 0x3d, 0x97, 0xe7, 0xf5, 0x70, 0x09, 0xaa, 0x27, 0xec, 0x3d,
	0x9c, 0x71, 0x5c, 0x2b, 0x4f, 0xe8, 0xa2, 0x43, 0x8f, 0xb7, 0x7c, 0x84, 0x8b, 0x38, 0xe5, 0xe7,
	0x68, 0xd3, 0xd8, 0xab, 0x3e, 0x01, 0x8b, 0x7d, 0xdd, 0x45, 0xcb, 0xa3, 0x15, 0x23, 0x1a, 0xdf,
	0x02, 0x5c, 0xa3, 0xc6, 0xd8, 0x38, 0xa2, 0xa1, 0x39, 0x0d, 0xbf, 0xe7, 0xc3, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x12, 0xc5, 0x38, 0xb6, 0x52, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpidHandlerClient is the client API for SpidHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpidHandlerClient interface {
	GetSpidInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	RegisterSpid(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	UpdateBatteryInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	UpdateSpidLocation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	DeleteSpid(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
}

type spidHandlerClient struct {
	cc *grpc.ClientConn
}

func NewSpidHandlerClient(cc *grpc.ClientConn) SpidHandlerClient {
	return &spidHandlerClient{cc}
}

func (c *spidHandlerClient) GetSpidInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/SpidHandler/GetSpidInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) RegisterSpid(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/SpidHandler/RegisterSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) UpdateBatteryInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/SpidHandler/UpdateBatteryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) UpdateSpidLocation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/SpidHandler/UpdateSpidLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spidHandlerClient) DeleteSpid(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/SpidHandler/DeleteSpid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpidHandlerServer is the server API for SpidHandler service.
type SpidHandlerServer interface {
	GetSpidInfo(context.Context, *ClientRequest) (*ServerResponse, error)
	RegisterSpid(context.Context, *ClientRequest) (*ServerResponse, error)
	UpdateBatteryInfo(context.Context, *ClientRequest) (*ServerResponse, error)
	UpdateSpidLocation(context.Context, *ClientRequest) (*ServerResponse, error)
	DeleteSpid(context.Context, *ClientRequest) (*ServerResponse, error)
}

// UnimplementedSpidHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedSpidHandlerServer struct {
}

func (*UnimplementedSpidHandlerServer) GetSpidInfo(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpidInfo not implemented")
}
func (*UnimplementedSpidHandlerServer) RegisterSpid(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSpid not implemented")
}
func (*UnimplementedSpidHandlerServer) UpdateBatteryInfo(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBatteryInfo not implemented")
}
func (*UnimplementedSpidHandlerServer) UpdateSpidLocation(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpidLocation not implemented")
}
func (*UnimplementedSpidHandlerServer) DeleteSpid(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpid not implemented")
}

func RegisterSpidHandlerServer(s *grpc.Server, srv SpidHandlerServer) {
	s.RegisterService(&_SpidHandler_serviceDesc, srv)
}

func _SpidHandler_GetSpidInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).GetSpidInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpidHandler/GetSpidInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).GetSpidInfo(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_RegisterSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).RegisterSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpidHandler/RegisterSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).RegisterSpid(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_UpdateBatteryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).UpdateBatteryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpidHandler/UpdateBatteryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).UpdateBatteryInfo(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_UpdateSpidLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).UpdateSpidLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpidHandler/UpdateSpidLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).UpdateSpidLocation(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpidHandler_DeleteSpid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpidHandlerServer).DeleteSpid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpidHandler/DeleteSpid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpidHandlerServer).DeleteSpid(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpidHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SpidHandler",
	HandlerType: (*SpidHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpidInfo",
			Handler:    _SpidHandler_GetSpidInfo_Handler,
		},
		{
			MethodName: "RegisterSpid",
			Handler:    _SpidHandler_RegisterSpid_Handler,
		},
		{
			MethodName: "UpdateBatteryInfo",
			Handler:    _SpidHandler_UpdateBatteryInfo_Handler,
		},
		{
			MethodName: "UpdateSpidLocation",
			Handler:    _SpidHandler_UpdateSpidLocation_Handler,
		},
		{
			MethodName: "DeleteSpid",
			Handler:    _SpidHandler_DeleteSpid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spidHandler.proto",
}
