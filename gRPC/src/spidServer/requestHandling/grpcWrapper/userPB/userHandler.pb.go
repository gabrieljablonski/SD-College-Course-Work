// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userHandler.proto

package userPB

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a533fe24d37ba7, []int{0}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClientRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type ServerResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Ok                   bool     `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
	Body                 string   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerResponse) Reset()         { *m = ServerResponse{} }
func (m *ServerResponse) String() string { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()    {}
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a533fe24d37ba7, []int{1}
}

func (m *ServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerResponse.Unmarshal(m, b)
}
func (m *ServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerResponse.Marshal(b, m, deterministic)
}
func (m *ServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerResponse.Merge(m, src)
}
func (m *ServerResponse) XXX_Size() int {
	return xxx_messageInfo_ServerResponse.Size(m)
}
func (m *ServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerResponse proto.InternalMessageInfo

func (m *ServerResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServerResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServerResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ServerResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientRequest)(nil), "ClientRequest")
	proto.RegisterType((*ServerResponse)(nil), "ServerResponse")
}

func init() { proto.RegisterFile("userHandler.proto", fileDescriptor_62a533fe24d37ba7) }

var fileDescriptor_62a533fe24d37ba7 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0x6d, 0x5a, 0x44, 0xa7, 0xba, 0xa5, 0xf1, 0xb2, 0x78, 0x92, 0x3d, 0x79, 0x5a, 0xff,
	0xa2, 0x5e, 0xa5, 0x85, 0x2a, 0xf4, 0x94, 0x52, 0xf0, 0xba, 0xdd, 0x8c, 0x35, 0xec, 0x92, 0x89,
	0x49, 0x2a, 0xf4, 0xc3, 0xf9, 0xdd, 0x24, 0xdb, 0xc5, 0xb2, 0xb7, 0xf4, 0x36, 0xbc, 0xc7, 0xef,
	0xcd, 0x4b, 0x18, 0x18, 0x6f, 0x1c, 0xda, 0xb7, 0x42, 0xcb, 0x1a, 0x6d, 0x6e, 0x2c, 0x79, 0xca,
	0x66, 0x70, 0x3e, 0xa9, 0x15, 0x6a, 0x2f, 0xf0, 0x7b, 0x83, 0xce, 0xf3, 0x04, 0x98, 0x92, 0x69,
	0xef, 0xaa, 0x77, 0x7d, 0x2a, 0x98, 0x92, 0x9c, 0xc3, 0xc0, 0x6f, 0x0d, 0xa6, 0xac, 0x51, 0x9a,
	0x39, 0x68, 0x2b, 0x92, 0xdb, 0xb4, 0xbf, 0xd3, 0xc2, 0x9c, 0x7d, 0x40, 0xb2, 0x40, 0xfb, 0x83,
	0x56, 0xa0, 0x33, 0xa4, 0x1d, 0x46, 0x25, 0x25, 0xc0, 0xa8, 0x6a, 0x72, 0x4e, 0x04, 0xa3, 0xea,
	0x3f, 0x79, 0xb0, 0x4f, 0xbe, 0xff, 0xed, 0xc3, 0x70, 0xb9, 0x2f, 0xce, 0x6f, 0x61, 0x38, 0x43,
	0x1f, 0x94, 0x77, 0xfd, 0x49, 0x3c, 0xc9, 0x3b, 0x0f, 0xb8, 0x1c, 0xe5, 0xdd, 0x1e, 0xd9, 0x11,
	0xbf, 0x83, 0x33, 0x81, 0x6b, 0xe5, 0x3c, 0xda, 0x80, 0xc5, 0x20, 0xcf, 0xc0, 0x97, 0x46, 0x16,
	0x1e, 0x03, 0x30, 0xa7, 0xb2, 0xf0, 0x8a, 0x74, 0x0c, 0x78, 0x03, 0x30, 0xc5, 0x1a, 0x77, 0x60,
	0xe4, 0xa6, 0xd6, 0x7d, 0x75, 0x8e, 0x4a, 0x15, 0xbd, 0xe9, 0x05, 0x2e, 0x5a, 0x77, 0xaa, 0x0e,
	0x23, 0x1f, 0x61, 0xd4, 0xba, 0x0b, 0xa3, 0x64, 0xec, 0x2f, 0x3e, 0xc1, 0xb8, 0x75, 0xe7, 0x54,
	0x56, 0x93, 0xaf, 0x42, 0xaf, 0x31, 0x82, 0x5b, 0x1d, 0x37, 0x97, 0xf6, 0xf0, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x4c, 0x3e, 0x65, 0x23, 0x7e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserHandlerClient is the client API for UserHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserHandlerClient interface {
	GetUserInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	RegisterUser(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	UpdateUserLocation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	DeleteUser(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	RequestAssociation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	RequestDissociation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	RequestSpidInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	RequestLockChange(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
}

type userHandlerClient struct {
	cc *grpc.ClientConn
}

func NewUserHandlerClient(cc *grpc.ClientConn) UserHandlerClient {
	return &userHandlerClient{cc}
}

func (c *userHandlerClient) GetUserInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerClient) RegisterUser(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerClient) UpdateUserLocation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/UpdateUserLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerClient) DeleteUser(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerClient) RequestAssociation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/RequestAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerClient) RequestDissociation(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/RequestDissociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerClient) RequestSpidInfo(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/RequestSpidInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerClient) RequestLockChange(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/UserHandler/RequestLockChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserHandlerServer is the server API for UserHandler service.
type UserHandlerServer interface {
	GetUserInfo(context.Context, *ClientRequest) (*ServerResponse, error)
	RegisterUser(context.Context, *ClientRequest) (*ServerResponse, error)
	UpdateUserLocation(context.Context, *ClientRequest) (*ServerResponse, error)
	DeleteUser(context.Context, *ClientRequest) (*ServerResponse, error)
	RequestAssociation(context.Context, *ClientRequest) (*ServerResponse, error)
	RequestDissociation(context.Context, *ClientRequest) (*ServerResponse, error)
	RequestSpidInfo(context.Context, *ClientRequest) (*ServerResponse, error)
	RequestLockChange(context.Context, *ClientRequest) (*ServerResponse, error)
}

// UnimplementedUserHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedUserHandlerServer struct {
}

func (*UnimplementedUserHandlerServer) GetUserInfo(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedUserHandlerServer) RegisterUser(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedUserHandlerServer) UpdateUserLocation(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocation not implemented")
}
func (*UnimplementedUserHandlerServer) DeleteUser(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedUserHandlerServer) RequestAssociation(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAssociation not implemented")
}
func (*UnimplementedUserHandlerServer) RequestDissociation(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDissociation not implemented")
}
func (*UnimplementedUserHandlerServer) RequestSpidInfo(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSpidInfo not implemented")
}
func (*UnimplementedUserHandlerServer) RequestLockChange(ctx context.Context, req *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLockChange not implemented")
}

func RegisterUserHandlerServer(s *grpc.Server, srv UserHandlerServer) {
	s.RegisterService(&_UserHandler_serviceDesc, srv)
}

func _UserHandler_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).GetUserInfo(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandler_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).RegisterUser(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandler_UpdateUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).UpdateUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/UpdateUserLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).UpdateUserLocation(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandler_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).DeleteUser(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandler_RequestAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).RequestAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/RequestAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).RequestAssociation(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandler_RequestDissociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).RequestDissociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/RequestDissociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).RequestDissociation(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandler_RequestSpidInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).RequestSpidInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/RequestSpidInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).RequestSpidInfo(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandler_RequestLockChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlerServer).RequestLockChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHandler/RequestLockChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlerServer).RequestLockChange(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserHandler",
	HandlerType: (*UserHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserHandler_GetUserInfo_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _UserHandler_RegisterUser_Handler,
		},
		{
			MethodName: "UpdateUserLocation",
			Handler:    _UserHandler_UpdateUserLocation_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserHandler_DeleteUser_Handler,
		},
		{
			MethodName: "RequestAssociation",
			Handler:    _UserHandler_RequestAssociation_Handler,
		},
		{
			MethodName: "RequestDissociation",
			Handler:    _UserHandler_RequestDissociation_Handler,
		},
		{
			MethodName: "RequestSpidInfo",
			Handler:    _UserHandler_RequestSpidInfo_Handler,
		},
		{
			MethodName: "RequestLockChange",
			Handler:    _UserHandler_RequestLockChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userHandler.proto",
}
